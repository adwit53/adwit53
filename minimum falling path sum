class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        
        vector<vector<int>> dp(matrix.size(),vector<int> (matrix[0].size(),-1));
        int m=recurs(matrix,0,0,dp);
        for(int k=1;k<matrix[0].size();k++)
        {
            m=min(m,recurs(matrix,0,k,dp));
        }
        return(m);
    }
    int recurs(vector<vector<int>>& matrix,int i, int j,vector<vector<int>>& dp)
    {
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int a=0;
        if(i==matrix.size()-1)
        {
            return dp[i][j]=matrix[i][j];
        }
        if(j==0)
        {
        return dp[i][j]=(min(matrix[i][j]+recurs(matrix,i+1,j,dp),matrix[i][j]+recurs(matrix,i+1,j+1,dp)));
        }
        else if(j==matrix[i].size()-1)
        {
         return dp[i][j]=(min(matrix[i][j]+recurs(matrix,i+1,j,dp),matrix[i][j]+recurs(matrix,i+1,j-1,dp)));   
        }
        else
        {
          a=min(matrix[i][j]+recurs(matrix,i+1,j,dp),matrix[i][j]+recurs(matrix,i+1,j-1,dp));  
          return dp[i][j]=(min(a,matrix[i][j]+recurs(matrix,i+1,j+1,dp)));
        }
    }
};
