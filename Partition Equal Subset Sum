class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int s1=0,sum=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
        }
        if(sum%2==1)
        {
            return false;
        }
        vector<vector<int>> arr( nums.size()+1, vector<int> ((sum/2)+1,-1)); 
        return recurs(nums,sum/2,0,arr);
    }
    bool recurs(vector<int>& nums,int sum,int i,vector<vector<int>> &arr)
    {
        if(sum==0)
        {
            return arr[i][sum]=true;
        }
        if(arr[i][sum]!=-1)
        {
            return arr[i][sum];
        }
        if(i==nums.size())
        {
            return arr[i][sum]=false;
        }
        if(nums[i]>sum)
        {
            return arr[i][sum]=recurs(nums,sum,i+1,arr);
        }
        else
        {
            return arr[i][sum]=(recurs(nums,sum-nums[i],i+1,arr)||recurs(nums,sum,i+1,arr));
        }

    }
};
